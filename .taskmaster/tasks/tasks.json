{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Vue3 프론트엔드 프로젝트 초기화 및 설정",
        "description": "Vue 3.4 + TypeScript 프로젝트를 초기화하고 필요한 개발 도구들을 설정합니다.",
        "details": "Vue CLI 또는 Vite를 사용하여 Vue 3.4 + TypeScript 프로젝트를 생성하고, 다음 도구들을 설정합니다:\n- Vite 빌드 도구 설정\n- TypeScript 설정 (strict mode)\n- Vue Router 4 라우팅 설정\n- Pinia 상태 관리 라이브러리 설정\n- Tailwind CSS 3 스타일링 프레임워크 설정\n- Axios HTTP 클라이언트 설정\n- ESLint + Prettier 코드 품질 도구 설정\n- Vite 환경변수 설정 (.env 파일)",
        "testStrategy": "프로젝트 빌드 및 개발 서버 실행 테스트, TypeScript 컴파일 오류 없음 확인, 각 라이브러리 정상 import 확인",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Vue 3 프로젝트 초기화 및 기본 구조 생성",
            "description": "Vite를 사용하여 Vue 3.4 + TypeScript 프로젝트를 frontend 폴더에 초기화하고 기본 프로젝트 구조를 설정합니다.",
            "dependencies": [],
            "details": "frontend 폴더에서 `npm create vue@latest . -- --typescript --router --pinia --vitest` 명령어로 Vue 3 프로젝트를 초기화합니다. 이 과정에서 TypeScript, Vue Router 4, Pinia 상태관리, Vitest 테스팅 프레임워크가 포함됩니다. 생성된 파일들의 구조를 확인하고 package.json의 의존성을 검토합니다.",
            "status": "pending",
            "testStrategy": "프로젝트 초기화 완료 후 `npm run dev` 명령어로 개발 서버가 정상 실행되는지 확인하고, TypeScript 컴파일 오류가 없는지 검증합니다."
          },
          {
            "id": 2,
            "title": "Tailwind CSS 및 스타일링 프레임워크 설정",
            "description": "Tailwind CSS 3와 관련 플러그인을 설치하고 설정하여 일관된 스타일링 시스템을 구축합니다.",
            "dependencies": [
              "1.1"
            ],
            "details": "`npm install -D @tailwindcss/forms tailwindcss postcss autoprefixer` 명령어로 Tailwind CSS를 설치하고, `npx tailwindcss init -p` 명령어로 설정 파일을 생성합니다. tailwind.config.js 파일에서 content 경로를 설정하고 @tailwindcss/forms 플러그인을 추가합니다. main.css 파일에 Tailwind CSS 디렉티브를 추가하여 전역 스타일을 적용합니다.",
            "status": "pending",
            "testStrategy": "Tailwind CSS 클래스가 정상적으로 적용되는지 간단한 컴포넌트를 만들어 테스트하고, PostCSS 빌드 과정이 오류 없이 완료되는지 확인합니다."
          },
          {
            "id": 3,
            "title": "HTTP 클라이언트 및 API 통신 설정",
            "description": "Axios HTTP 클라이언트를 설치하고 백엔드 API와의 통신을 위한 기본 설정을 구성합니다.",
            "dependencies": [
              "1.1"
            ],
            "details": "`npm install axios` 명령어로 Axios를 설치하고, src/api 폴더를 생성하여 API 클라이언트 모듈을 구성합니다. 백엔드 서버(localhost:8080/api)와의 통신을 위한 기본 설정, 요청/응답 인터셉터, 에러 핸들링을 포함합니다. 환경변수를 통해 API 베이스 URL을 관리할 수 있도록 설정합니다.",
            "status": "pending",
            "testStrategy": "Axios 인스턴스가 정상적으로 생성되고, 기본 설정값들이 올바르게 적용되는지 확인합니다. 네트워크 에러 상황에서의 에러 핸들링이 정상 동작하는지 테스트합니다."
          },
          {
            "id": 4,
            "title": "코드 품질 도구 설정 (ESLint, Prettier)",
            "description": "ESLint와 Prettier를 설정하여 일관된 코드 스타일과 품질을 유지할 수 있는 개발 환경을 구축합니다.",
            "dependencies": [
              "1.1"
            ],
            "details": "Vue 3 프로젝트 초기화 시 함께 설치된 ESLint 설정을 확인하고, 프로젝트에 맞게 커스터마이징합니다. .eslintrc.cjs 파일에서 Vue 3, TypeScript, Composition API에 적합한 규칙을 설정합니다. Prettier와의 충돌을 방지하기 위한 설정을 추가하고, VS Code 확장과 연동되도록 .vscode/settings.json 파일을 구성합니다. pre-commit 훅 설정도 고려합니다.",
            "status": "pending",
            "testStrategy": "의도적으로 코드 스타일 오류를 만들어 ESLint가 정상적으로 감지하는지 확인하고, Prettier 포맷팅이 올바르게 적용되는지 테스트합니다."
          },
          {
            "id": 5,
            "title": "환경변수 설정 및 개발 환경 최종 구성",
            "description": "Vite 환경변수 시스템을 활용하여 개발/운영 환경을 분리하고 전체 개발 환경 설정을 완료합니다.",
            "dependencies": [
              "1.2",
              "1.3",
              "1.4"
            ],
            "details": ".env, .env.development, .env.production 파일을 생성하여 환경별 변수를 관리합니다. API 베이스 URL, 포트 번호 등 환경에 따라 달라질 수 있는 설정값들을 환경변수로 분리합니다. vite.config.ts 파일에서 프록시 설정을 통해 개발 시 CORS 문제를 해결하고, 빌드 최적화 옵션을 설정합니다. package.json의 scripts를 확인하여 개발, 빌드, 테스트 명령어가 정상 동작하는지 검증합니다.",
            "status": "pending",
            "testStrategy": "각 환경별 환경변수가 올바르게 로드되는지 확인하고, `npm run build` 명령어로 프로덕션 빌드가 성공적으로 완료되는지 테스트합니다. 빌드된 파일들이 dist 폴더에 정상적으로 생성되는지 확인합니다."
          }
        ]
      },
      {
        "id": 2,
        "title": "백엔드 패키지 구조 및 기본 설정 완성",
        "description": "Spring Boot 프로젝트의 패키지 구조를 설계하고 공통 설정을 완성합니다.",
        "details": "다음 패키지 구조를 생성합니다:\n- com.study.todolist.controller (REST 컨트롤러)\n- com.study.todolist.service (비즈니스 로직)\n- com.study.todolist.repository (데이터 접근)\n- com.study.todolist.entity (JPA 엔티티)\n- com.study.todolist.dto (데이터 전송 객체)\n- com.study.todolist.form (요청 폼 클래스)\n- com.study.todolist.config (설정 클래스)\n- com.study.todolist.exception (예외 처리)\n- com.study.todolist.util (유틸리티)\n\n추가 설정:\n- CORS 설정 (프론트엔드 연동 준비)\n- 글로벌 예외 처리기\n- 공통 응답 DTO 클래스\n- API 응답 표준화",
        "testStrategy": "Spring Boot 애플리케이션 정상 구동 확인, 기본 health check 엔드포인트 테스트, 데이터베이스 연결 확인",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "기본 패키지 구조 생성",
            "description": "Spring Boot 프로젝트에 필요한 기본 패키지 구조를 생성합니다.",
            "dependencies": [],
            "details": "com.study.todolist 패키지 하위에 다음 패키지들을 생성: controller, service, repository, entity, dto, form, config, exception, util. 각 패키지에는 .gitkeep 파일을 추가하여 빈 패키지가 Git에 추적되도록 설정합니다.",
            "status": "pending",
            "testStrategy": "패키지 구조가 올바르게 생성되었는지 확인하고, 각 패키지가 IDE에서 인식되는지 테스트"
          },
          {
            "id": 2,
            "title": "공통 응답 DTO 및 유틸리티 클래스 구현",
            "description": "API 응답 표준화를 위한 공통 DTO와 유틸리티 클래스를 구현합니다.",
            "dependencies": [
              "2.1"
            ],
            "details": "dto 패키지에 ApiResponse<T> 제네릭 클래스 생성 (success, message, data 필드 포함). util 패키지에 ApiResponseUtil 클래스 생성하여 성공/실패 응답 생성 메서드 제공. ResponseEntity를 감싸는 표준화된 응답 구조 설계.",
            "status": "pending",
            "testStrategy": "ApiResponse 클래스 직렬화/역직렬화 테스트, ApiResponseUtil 메서드 동작 확인"
          },
          {
            "id": 3,
            "title": "글로벌 예외 처리기 구현",
            "description": "애플리케이션 전체의 예외를 처리하는 글로벌 예외 처리기를 구현합니다.",
            "dependencies": [
              "2.2"
            ],
            "details": "exception 패키지에 커스텀 예외 클래스들 생성 (BusinessException, EntityNotFoundException 등). config 패키지에 @RestControllerAdvice를 사용한 GlobalExceptionHandler 클래스 생성. HTTP 상태 코드별 예외 매핑, 유효성 검증 오류 처리, 데이터베이스 제약 조건 위반 처리 등을 포함.",
            "status": "pending",
            "testStrategy": "각 예외 상황별 응답 형식 테스트, HTTP 상태 코드 확인, 에러 메시지 국제화 지원 테스트"
          },
          {
            "id": 4,
            "title": "CORS 설정 및 웹 구성 클래스 구현",
            "description": "프론트엔드와의 연동을 위한 CORS 설정과 웹 관련 구성을 구현합니다.",
            "dependencies": [
              "2.3"
            ],
            "details": "config 패키지에 WebConfig 클래스 생성하여 @EnableWebMvc와 WebMvcConfigurer 구현. CORS 설정에서 프론트엔드 포트(5173) 허용, HTTP 메서드 전체 허용, 인증 헤더 지원 설정. JSON 응답 한글 인코딩 설정, 정적 리소스 핸들링 설정 포함.",
            "status": "pending",
            "testStrategy": "CORS preflight 요청 테스트, 다양한 HTTP 메서드 허용 확인, 한글 응답 인코딩 테스트"
          },
          {
            "id": 5,
            "title": "기본 헬스체크 엔드포인트 및 설정 완성",
            "description": "애플리케이션 상태 확인을 위한 헬스체크 엔드포인트를 구현하고 모든 설정을 완성합니다.",
            "dependencies": [
              "2.1",
              "2.2",
              "2.3",
              "2.4"
            ],
            "details": "controller 패키지에 HealthController 클래스 생성하여 '/health' 엔드포인트 구현. 데이터베이스 연결 상태, 애플리케이션 기본 정보 반환. application.yml에 JPA 추가 설정(배치 사이즈, 명명 전략 등) 및 액추에이터 엔드포인트 설정. 개발/운영 환경별 프로파일 설정 추가.",
            "status": "pending",
            "testStrategy": "헬스체크 엔드포인트 응답 확인, 데이터베이스 연결 테스트, Spring Boot 애플리케이션 정상 구동 및 포트 바인딩 확인"
          }
        ]
      },
      {
        "id": 3,
        "title": "Todo 엔티티 및 DTO 클래스 설계",
        "description": "Todo 도메인의 JPA 엔티티와 관련 DTO 클래스들을 설계하고 구현합니다.",
        "details": "Todo Entity 설계:\n- id (Long, @Id, @GeneratedValue)\n- title (String, @NotNull, 최대 200자)\n- description (String, TEXT 타입)\n- completed (Boolean, 기본값 false)\n- createdAt (LocalDateTime, @CreationTimestamp)\n- updatedAt (LocalDateTime, @UpdateTimestamp)\n\nDTO 클래스 생성:\n- TodoCreateRequest (제목, 설명 입력)\n- TodoUpdateRequest (제목, 설명, 완료상태 수정)\n- TodoResponse (모든 필드 응답)\n- TodoListResponse (목록 응답용, 페이징 지원)\n\n입력 검증:\n- @Valid, @NotBlank, @Size 어노테이션 활용\n- 커스텀 검증 메시지 설정",
        "testStrategy": "Entity 매핑 테스트, DTO 직렬화/역직렬화 테스트, 입력 검증 규칙 테스트, 데이터베이스 스키마 자동 생성 확인",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Todo 엔티티 클래스 생성 및 JPA 매핑 설정",
            "description": "com.study.todolist.entity 패키지에 Todo JPA 엔티티 클래스를 생성하고 데이터베이스 매핑을 설정합니다.",
            "dependencies": [],
            "details": "Todo.java 클래스 생성 - JPA 어노테이션 설정: @Entity, @Table(name = \"todos\"), @Id/@GeneratedValue(strategy = GenerationType.IDENTITY), @Column 제약조건 설정 - 필드 정의: id(Long), title(String, 최대 200자), description(String, TEXT), completed(Boolean, 기본값 false) - 타임스탬프 필드: @CreationTimestamp createdAt, @UpdateTimestamp updatedAt - Lombok 어노테이션: @Getter, @Setter, @NoArgsConstructor, @AllArgsConstructor, @Builder - toString, equals, hashCode 메서드 자동 생성",
            "status": "pending",
            "testStrategy": "JPA 엔티티 매핑 테스트, 데이터베이스 스키마 자동 생성 확인, 필드 제약조건 테스트"
          },
          {
            "id": 2,
            "title": "Todo 생성 요청 DTO 클래스 구현",
            "description": "com.study.todolist.dto 패키지에 TodoCreateRequest DTO 클래스를 생성하여 Todo 생성 시 필요한 입력 데이터를 검증합니다.",
            "dependencies": [],
            "details": "TodoCreateRequest.java 클래스 생성 - 필드: title(String), description(String) - 입력 검증 어노테이션: @NotBlank(message = \"제목은 필수입니다\") @Size(max = 200, message = \"제목은 200자 이내로 입력해주세요\") - description 검증: @Size(max = 1000, message = \"설명은 1000자 이내로 입력해주세요\") - Lombok: @Getter, @Setter, @NoArgsConstructor, @AllArgsConstructor - Jackson 직렬화/역직렬화 지원",
            "status": "pending",
            "testStrategy": "DTO 직렬화/역직렬화 테스트, 입력 검증 규칙 단위 테스트, 경계값 테스트"
          },
          {
            "id": 3,
            "title": "Todo 수정 요청 DTO 클래스 구현",
            "description": "com.study.todolist.dto 패키지에 TodoUpdateRequest DTO 클래스를 생성하여 Todo 수정 시 필요한 입력 데이터를 검증합니다.",
            "dependencies": [],
            "details": "TodoUpdateRequest.java 클래스 생성 - 필드: title(String), description(String), completed(Boolean) - 입력 검증: @Size(max = 200) title, @Size(max = 1000) description - completed 필드는 null 허용 (부분 업데이트 지원) - 커스텀 검증 메시지 설정 - Lombok: @Getter, @Setter, @NoArgsConstructor, @AllArgsConstructor - Optional 필드 처리를 위한 빌더 패턴 적용",
            "status": "pending",
            "testStrategy": "부분 업데이트 시나리오 테스트, null 값 처리 테스트, 입력 검증 규칙 테스트"
          },
          {
            "id": 4,
            "title": "Todo 응답 DTO 클래스 구현",
            "description": "com.study.todolist.dto 패키지에 TodoResponse DTO 클래스를 생성하여 API 응답 시 Todo 데이터를 전달합니다.",
            "dependencies": [
              "3.1"
            ],
            "details": "TodoResponse.java 클래스 생성 - 모든 Todo 필드 포함: id, title, description, completed, createdAt, updatedAt - Entity에서 DTO로 변환하는 정적 팩토리 메서드 구현: public static TodoResponse from(Todo todo) - LocalDateTime -> ISO 8601 문자열 변환을 위한 @JsonFormat 어노테이션 - Lombok: @Getter, @Builder, @AllArgsConstructor - 불변 객체로 설계 (setter 없음)",
            "status": "pending",
            "testStrategy": "Entity-DTO 변환 테스트, JSON 직렬화 형식 확인, 날짜 시간 포맷팅 테스트"
          },
          {
            "id": 5,
            "title": "Todo 목록 응답 및 페이징 DTO 클래스 구현",
            "description": "com.study.todolist.dto 패키지에 페이징을 지원하는 TodoListResponse DTO 클래스를 생성합니다.",
            "dependencies": [
              "3.4"
            ],
            "details": "TodoListResponse.java 클래스 생성 - 필드: List<TodoResponse> todos, PageInfo pageInfo - PageInfo 내부 클래스: totalElements(long), totalPages(int), currentPage(int), size(int), hasNext(boolean), hasPrevious(boolean) - Spring Data의 Page 객체를 받아서 변환하는 정적 팩토리 메서드: public static TodoListResponse from(Page<Todo> page) - 빈 목록 처리 및 null 안전성 보장 - Lombok: @Getter, @Builder, @AllArgsConstructor",
            "status": "pending",
            "testStrategy": "페이징 메타데이터 정확성 테스트, 빈 목록 처리 테스트, Page 객체 변환 로직 테스트"
          }
        ]
      },
      {
        "id": 4,
        "title": "Todo Repository 인터페이스 구현",
        "description": "JpaRepository를 확장한 Todo 데이터 접근 계층을 구현합니다.",
        "details": "TodoRepository 인터페이스 생성:\n- JpaRepository<Todo, Long> 확장\n- 커스텀 쿼리 메서드 정의:\n  - findByCompletedOrderByCreatedAtDesc(Boolean completed)\n  - findByTitleContainingIgnoreCaseOrderByCreatedAtDesc(String title)\n  - countByCompleted(Boolean completed)\n\n페이징 및 정렬 지원:\n- Pageable 매개변수 활용\n- 기본 정렬: 생성일 내림차순\n- 검색 기능을 위한 쿼리 메서드\n\n네이티브 쿼리 (필요시):\n- 복잡한 검색 조건 처리\n- 성능 최적화를 위한 인덱스 활용",
        "testStrategy": "@DataJpaTest를 활용한 Repository 테스트, CRUD 기본 동작 테스트, 커스텀 쿼리 메서드 테스트, 페이징 및 정렬 기능 테스트",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Todo Service 계층 구현",
        "description": "Todo의 비즈니스 로직을 담당하는 Service 계층을 구현합니다.",
        "details": "TodoService 클래스 구현:\n- @Service 어노테이션\n- @Transactional 트랜잭션 관리\n\n비즈니스 메서드:\n- createTodo(TodoCreateRequest): 새 할일 생성\n- updateTodo(Long id, TodoUpdateRequest): 할일 수정\n- deleteTodo(Long id): 할일 삭제\n- getTodo(Long id): 할일 상세 조회\n- getAllTodos(Pageable): 전체 목록 조회\n- getCompletedTodos(Boolean completed, Pageable): 완료 상태별 조회\n- searchTodos(String keyword, Pageable): 제목 검색\n- toggleComplete(Long id): 완료 상태 토글\n\n예외 처리:\n- TodoNotFoundException 커스텀 예외\n- 비즈니스 규칙 검증",
        "testStrategy": "@ExtendWith(MockitoExtension.class)를 활용한 Service 계층 단위 테스트, Repository 모킹, 비즈니스 로직 검증, 예외 상황 테스트",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "커스텀 예외 클래스 및 Service 기본 구조 생성",
            "description": "TodoService에서 사용할 커스텀 예외 클래스들을 생성하고 Service 클래스의 기본 구조를 설정합니다.",
            "dependencies": [],
            "details": "com.study.todolist.exception 패키지에 TodoNotFoundException 클래스를 생성합니다. 이 클래스는 RuntimeException을 상속받고 @ResponseStatus(HttpStatus.NOT_FOUND) 어노테이션을 사용합니다. com.study.todolist.service 패키지에 TodoService 클래스를 생성하고 @Service, @Transactional(readOnly = true) 어노테이션을 추가합니다. 생성자에서 TodoRepository를 주입받도록 설정하고 기본 필드를 선언합니다.",
            "status": "pending",
            "testStrategy": "커스텀 예외 클래스 생성 확인, Service 클래스 스프링 빈 등록 테스트, 의존성 주입 정상 동작 확인"
          },
          {
            "id": 2,
            "title": "기본 CRUD 메서드 구현 (생성, 조회, 삭제)",
            "description": "할일 생성, 단일 조회, 삭제를 담당하는 기본적인 Service 메서드들을 구현합니다.",
            "dependencies": [
              "5.1"
            ],
            "details": "@Transactional 어노테이션을 사용하여 createTodo(TodoCreateRequest request) 메서드를 구현합니다. Entity 생성 시 Builder 패턴을 활용하고 repository.save()를 호출합니다. getTodo(Long id) 메서드는 repository.findById()를 사용하여 조회하고 존재하지 않을 경우 TodoNotFoundException을 발생시킵니다. deleteTodo(Long id) 메서드는 @Transactional 어노테이션과 함께 존재 여부를 먼저 확인 후 repository.deleteById()를 호출합니다.",
            "status": "pending",
            "testStrategy": "각 메서드별 정상 케이스 테스트, 존재하지 않는 ID에 대한 예외 처리 테스트, 트랜잭션 롤백 테스트"
          },
          {
            "id": 3,
            "title": "할일 수정 및 완료 상태 토글 메서드 구현",
            "description": "할일 정보를 수정하고 완료 상태를 변경하는 비즈니스 로직을 구현합니다.",
            "dependencies": [
              "5.2"
            ],
            "details": "@Transactional 어노테이션을 사용하여 updateTodo(Long id, TodoUpdateRequest request) 메서드를 구현합니다. 기존 엔티티를 조회한 후 변경된 필드만 업데이트하는 부분 업데이트 로직을 적용합니다. toggleComplete(Long id) 메서드는 현재 완료 상태를 반대로 변경하는 로직을 구현합니다. 두 메서드 모두 영속성 컨텍스트의 더티 체킹을 활용하여 자동으로 UPDATE 쿼리가 실행되도록 합니다.",
            "status": "pending",
            "testStrategy": "부분 업데이트 로직 테스트, 완료 상태 토글 정확성 확인, 영속성 컨텍스트 더티 체킹 동작 테스트"
          },
          {
            "id": 4,
            "title": "목록 조회 및 페이징 처리 메서드 구현",
            "description": "전체 목록 조회와 조건별 조회를 위한 페이징 처리가 포함된 Service 메서드들을 구현합니다.",
            "dependencies": [
              "5.2"
            ],
            "details": "getAllTodos(Pageable pageable) 메서드를 구현하여 repository.findAll(pageable)을 호출합니다. getCompletedTodos(Boolean completed, Pageable pageable) 메서드는 완료 상태에 따른 필터링을 제공하며, completed가 null인 경우 전체 조회를 하도록 분기 처리합니다. 각 메서드는 Page<Todo> 객체를 반환하며, 호출하는 쪽에서 DTO 변환을 처리할 수 있도록 설계합니다. 기본 정렬 순서는 생성일 내림차순으로 설정합니다.",
            "status": "pending",
            "testStrategy": "페이징 메타데이터 정확성 테스트, 완료 상태별 필터링 테스트, 정렬 순서 확인 테스트, 빈 결과에 대한 처리 테스트"
          },
          {
            "id": 5,
            "title": "검색 기능 및 비즈니스 규칙 검증 구현",
            "description": "제목 기반 검색 기능과 할일 생성/수정 시 필요한 비즈니스 규칙 검증 로직을 구현합니다.",
            "dependencies": [
              "5.1",
              "5.3"
            ],
            "details": "searchTodos(String keyword, Pageable pageable) 메서드를 구현하여 제목에 키워드가 포함된 할일을 검색합니다. 키워드가 null이거나 빈 문자열인 경우 전체 조회를 수행하도록 처리합니다. 할일 생성 시 중복 제목 검증, 최대 할일 개수 제한 등의 비즈니스 규칙을 validateTodoCreation() 메서드로 분리하여 구현합니다. 할일 수정 시에도 필요한 검증 로직을 validateTodoUpdate() 메서드로 구현합니다. 모든 검증 실패 시 적절한 커스텀 예외를 발생시킵니다.",
            "status": "pending",
            "testStrategy": "검색 기능 정확성 테스트, 키워드 null/빈값 처리 테스트, 비즈니스 규칙 검증 로직 테스트, 검증 실패 시 예외 발생 확인"
          }
        ]
      },
      {
        "id": 6,
        "title": "Todo REST API Controller 구현",
        "description": "RESTful API 설계 원칙에 따른 Todo Controller를 구현합니다.",
        "details": "TodoController REST 엔드포인트:\n- GET /api/todos - 할일 목록 조회 (페이징, 검색)\n- GET /api/todos/{id} - 할일 상세 조회\n- POST /api/todos - 새 할일 생성\n- PUT /api/todos/{id} - 할일 전체 수정\n- PATCH /api/todos/{id}/complete - 완료 상태 토글\n- DELETE /api/todos/{id} - 할일 삭제\n\nHTTP 상태코드:\n- 200: 조회 성공\n- 201: 생성 성공\n- 204: 삭제 성공\n- 400: 잘못된 요청\n- 404: 리소스 없음\n\n어노테이션:\n- @RestController, @RequestMapping\n- @Valid, @PathVariable, @RequestBody\n- @GetMapping, @PostMapping, @PutMapping, @DeleteMapping\n\nAPI 응답 표준화: ResponseEntity 활용",
        "testStrategy": "@WebMvcTest를 활용한 Controller 계층 테스트, MockMvc를 통한 HTTP 요청/응답 테스트, JSON 직렬화 테스트, 입력 검증 테스트",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "TodoController 기본 구조 및 공통 응답 처리 구현",
            "description": "@RestController와 @RequestMapping 어노테이션을 활용하여 TodoController의 기본 구조를 구현하고, ResponseEntity를 사용한 표준화된 API 응답 처리 방식을 설정합니다.",
            "dependencies": [],
            "details": "com.study.todolist.controller 패키지에 TodoController 클래스 생성. @RestController, @RequestMapping(\"/todos\") 어노테이션 적용. ResponseEntity<T> 타입을 사용한 공통 응답 처리 메서드 구현. HTTP 상태코드 관리를 위한 유틸리티 메서드 추가. @RequiredArgsConstructor를 사용하여 TodoService 의존성 주입 준비.",
            "status": "pending",
            "testStrategy": "@WebMvcTest(TodoController.class)를 사용한 컨트롤러 계층 테스트 준비, MockMvc 설정 및 기본 구조 테스트"
          },
          {
            "id": 2,
            "title": "Todo 조회 엔드포인트 구현 (GET /api/todos, GET /api/todos/{id})",
            "description": "할일 목록 조회와 개별 할일 상세 조회 API를 구현합니다. 페이징과 검색 기능을 포함한 목록 조회와 PathVariable을 사용한 상세 조회를 제공합니다.",
            "dependencies": [
              "6.1"
            ],
            "details": "@GetMapping으로 GET /api/todos 엔드포인트 구현. Pageable 파라미터를 활용한 페이징 처리. @RequestParam을 사용한 검색 키워드 처리. @GetMapping(\"/{id}\")으로 상세 조회 구현. @PathVariable Long id 파라미터 처리. TodoService와 연동하여 데이터 조회. ResponseEntity.ok()를 사용한 200 상태코드 응답.",
            "status": "pending",
            "testStrategy": "MockMvc를 통한 GET 요청 테스트, 페이징 파라미터 테스트, PathVariable 파라미터 테스트, 정상 응답 JSON 구조 검증"
          },
          {
            "id": 3,
            "title": "Todo 생성 엔드포인트 구현 (POST /api/todos)",
            "description": "새로운 할일을 생성하는 API를 구현합니다. 요청 본문 검증과 201 Created 상태코드를 포함한 표준 REST 응답을 제공합니다.",
            "dependencies": [
              "6.1"
            ],
            "details": "@PostMapping으로 POST /api/todos 엔드포인트 구현. @RequestBody @Valid TodoCreateRequest 파라미터로 요청 본문 처리. BindingResult를 통한 검증 오류 처리. TodoService.createTodo() 메서드 호출. ResponseEntity.status(HttpStatus.CREATED)를 사용한 201 상태코드 응답. Location 헤더에 생성된 리소스 URL 포함.",
            "status": "pending",
            "testStrategy": "@Valid 검증 테스트, 잘못된 요청 데이터에 대한 400 Bad Request 테스트, 정상 생성 시 201 Created 응답 테스트, Location 헤더 검증"
          },
          {
            "id": 4,
            "title": "Todo 수정 엔드포인트 구현 (PUT /api/todos/{id}, PATCH /api/todos/{id}/complete)",
            "description": "할일 전체 수정과 완료 상태 토글 API를 구현합니다. PUT과 PATCH 메서드의 의미론적 차이를 고려한 구현을 제공합니다.",
            "dependencies": [
              "6.1"
            ],
            "details": "@PutMapping(\"/{id}\")으로 전체 수정 엔드포인트 구현. @PathVariable Long id와 @RequestBody @Valid TodoUpdateRequest 파라미터 처리. @PatchMapping(\"/{id}/complete\")으로 완료 상태 토글 구현. TodoService 메서드 호출 및 ResponseEntity.ok() 응답. 리소스 존재 여부 확인 후 404 Not Found 처리.",
            "status": "pending",
            "testStrategy": "PUT 요청 테스트, PATCH 요청 테스트, 존재하지 않는 ID에 대한 404 응답 테스트, 수정된 데이터 응답 검증"
          },
          {
            "id": 5,
            "title": "Todo 삭제 엔드포인트 및 예외 처리 구현 (DELETE /api/todos/{id})",
            "description": "할일 삭제 API와 컨트롤러 전역 예외 처리를 구현합니다. 204 No Content 응답과 404 Not Found 예외 처리를 포함합니다.",
            "dependencies": [
              "6.1"
            ],
            "details": "@DeleteMapping(\"/{id}\")으로 삭제 엔드포인트 구현. @PathVariable Long id 파라미터 처리. TodoService.deleteTodo() 호출 후 ResponseEntity.noContent().build()로 204 응답. @ExceptionHandler를 사용한 TodoNotFoundException 예외 처리. @ControllerAdvice 클래스 생성하여 전역 예외 처리. 400, 404, 500 상태코드별 에러 응답 표준화.",
            "status": "pending",
            "testStrategy": "DELETE 요청 테스트, 204 No Content 응답 검증, 존재하지 않는 ID 삭제 시 404 응답 테스트, 전역 예외 처리 동작 확인"
          }
        ]
      },
      {
        "id": 7,
        "title": "프론트엔드 폴더 구조 및 기본 컴포넌트 설정",
        "description": "Vue3 프로젝트의 폴더 구조를 설계하고 기본 컴포넌트들을 생성합니다.",
        "details": "폴더 구조 설계:\n- src/components/ (재사용 가능한 컴포넌트)\n- src/views/ (페이지 컴포넌트)\n- src/stores/ (Pinia 스토어)\n- src/router/ (라우터 설정)\n- src/api/ (API 클라이언트)\n- src/types/ (TypeScript 타입 정의)\n- src/utils/ (유틸리티 함수)\n- src/assets/ (정적 리소스)\n\n기본 컴포넌트 생성:\n- BaseButton.vue (공통 버튼 컴포넌트)\n- BaseInput.vue (공통 입력 컴포넌트)\n- BaseModal.vue (모달 컴포넌트)\n- AppHeader.vue (헤더 컴포넌트)\n- AppLayout.vue (레이아웃 컴포넌트)\n\nTailwind CSS 커스터마이징:\n- 프로젝트 색상 팔레트\n- 컴포넌트 스타일",
        "testStrategy": "컴포넌트 렌더링 테스트, 프롭 전달 테스트, 이벤트 방출 테스트, Vitest를 활용한 단위 테스트",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "API 클라이언트 및 HTTP 인터셉터 구현",
        "description": "백엔드 API와 통신하기 위한 HTTP 클라이언트를 구현합니다.",
        "details": "Axios 기반 API 클라이언트:\n- baseURL 환경변수 설정\n- 요청/응답 인터셉터\n- 에러 핸들링 및 재시도 로직\n- 로딩 상태 관리\n\nAPI 서비스 클래스:\n- TodoApiService 클래스\n- CRUD 메서드 구현:\n  - getTodos(params): 목록 조회\n  - getTodo(id): 상세 조회\n  - createTodo(data): 생성\n  - updateTodo(id, data): 수정\n  - deleteTodo(id): 삭제\n  - toggleComplete(id): 완료 토글\n\nTypeScript 타입 정의:\n- Todo 인터페이스\n- API 요청/응답 타입\n- 에러 타입 정의",
        "testStrategy": "API 서비스 메서드 테스트, 모킹을 통한 HTTP 요청 테스트, 에러 처리 시나리오 테스트, 인터셉터 동작 테스트",
        "priority": "medium",
        "dependencies": [
          6,
          7
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Axios 기반 HTTP 클라이언트 설정 및 환경 변수 구성",
            "description": "baseURL과 기본 설정을 포함한 Axios 인스턴스를 생성하고 환경 변수를 통한 API 엔드포인트 설정을 구현합니다.",
            "dependencies": [],
            "details": "src/api/client.ts 파일을 생성하여 Axios 인스턴스를 설정합니다. process.env.VITE_API_BASE_URL을 통해 백엔드 API 베이스 URL을 설정하고, 기본 헤더(Content-Type: application/json), timeout, withCredentials 등의 기본 설정을 포함합니다. .env 파일에 VITE_API_BASE_URL=http://localhost:8080/api를 설정합니다.",
            "status": "pending",
            "testStrategy": "Axios 인스턴스 생성 테스트, 환경변수 로딩 테스트, 기본 설정값 검증 테스트"
          },
          {
            "id": 2,
            "title": "요청/응답 인터셉터 및 에러 핸들링 구현",
            "description": "HTTP 요청과 응답을 가로채서 로깅, 인증 토큰 추가, 공통 에러 처리를 수행하는 인터셉터를 구현합니다.",
            "dependencies": [
              "8.1"
            ],
            "details": "request 인터셉터에서 Authorization 헤더 추가, 요청 로깅을 구현합니다. response 인터셉터에서 성공 응답 처리, 401/403 에러 시 로그아웃 처리, 네트워크 에러 및 기타 HTTP 에러에 대한 사용자 친화적 에러 메시지 변환을 구현합니다. 재시도 로직을 위한 axios-retry 라이브러리 통합도 포함합니다.",
            "status": "pending",
            "testStrategy": "인터셉터 동작 테스트, 에러 응답 처리 테스트, 재시도 로직 테스트, 토큰 자동 추가 테스트"
          },
          {
            "id": 3,
            "title": "TypeScript 타입 정의 및 인터페이스 설계",
            "description": "Todo 도메인과 API 통신에 필요한 모든 TypeScript 타입과 인터페이스를 정의합니다.",
            "dependencies": [],
            "details": "src/types/api.ts 파일에 Todo 인터페이스(id, title, description, completed, createdAt, updatedAt), API 요청 타입(CreateTodoRequest, UpdateTodoRequest), API 응답 타입(TodoResponse, TodoListResponse, ApiError), 페이징 관련 타입(PaginationParams, PaginatedResponse) 등을 정의합니다. Generic 타입을 활용하여 재사용 가능한 API 응답 타입도 포함합니다.",
            "status": "pending",
            "testStrategy": "타입 정의 검증 테스트, 인터페이스 호환성 테스트, 타입스크립트 컴파일 에러 없음 확인"
          },
          {
            "id": 4,
            "title": "로딩 상태 관리 시스템 구현",
            "description": "API 요청 중 로딩 상태를 전역적으로 관리하는 시스템을 구현합니다.",
            "dependencies": [
              "8.1"
            ],
            "details": "src/composables/useLoading.ts 파일에 로딩 상태 관리를 위한 composable을 생성합니다. 개별 요청별 로딩 상태 추적, 전역 로딩 상태 계산, 로딩 스피너 표시/숨김 기능을 포함합니다. request/response 인터셉터와 연동하여 자동으로 로딩 상태를 업데이트하도록 구현합니다. Vue 3 Composition API와 reactive를 활용합니다.",
            "status": "pending",
            "testStrategy": "로딩 상태 변화 테스트, 동시 요청 처리 테스트, 로딩 상태 초기화 테스트"
          },
          {
            "id": 5,
            "title": "TodoApiService 클래스 및 CRUD 메서드 구현",
            "description": "Todo 관련 모든 API 호출을 담당하는 서비스 클래스와 CRUD 메서드들을 구현합니다.",
            "dependencies": [
              "8.1",
              "8.2",
              "8.3",
              "8.4"
            ],
            "details": "src/services/TodoApiService.ts 파일에 클래스 기반 API 서비스를 생성합니다. getTodos(params?: PaginationParams & FilterParams), getTodo(id: number), createTodo(data: CreateTodoRequest), updateTodo(id: number, data: UpdateTodoRequest), deleteTodo(id: number), toggleComplete(id: number) 메서드를 구현합니다. 각 메서드는 적절한 HTTP 동사를 사용하고, 타입 안전성을 보장하며, 로딩 상태와 에러 처리를 포함합니다.",
            "status": "pending",
            "testStrategy": "각 CRUD 메서드 단위 테스트, 모킹을 통한 HTTP 요청/응답 테스트, 에러 시나리오 테스트, 매개변수 검증 테스트"
          }
        ]
      },
      {
        "id": 9,
        "title": "Pinia Store 및 상태 관리 구현",
        "description": "애플리케이션의 전역 상태를 관리하는 Pinia Store를 구현합니다.",
        "details": "useTodoStore 구현:\n- state: todos 배열, loading, error 상태\n- getters:\n  - completedTodos: 완료된 할일 목록\n  - pendingTodos: 미완료 할일 목록\n  - totalCount: 전체 할일 개수\n  - completedCount: 완료된 할일 개수\n\n- actions:\n  - fetchTodos(): 할일 목록 로드\n  - fetchTodo(id): 특정 할일 로드\n  - createTodo(data): 새 할일 생성\n  - updateTodo(id, data): 할일 수정\n  - deleteTodo(id): 할일 삭제\n  - toggleComplete(id): 완료 상태 토글\n\n에러 처리 및 로딩 상태:\n- 비동기 작업 중 로딩 표시\n- API 오류 시 사용자 친화적 메시지\n- 낙관적 업데이트 적용",
        "testStrategy": "Store 상태 변화 테스트, Actions 실행 테스트, Getters 계산 로직 테스트, 에러 상황 처리 테스트",
        "priority": "medium",
        "dependencies": [
          8
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Pinia Store 기본 구조 및 타입 정의 구현",
            "description": "useTodoStore의 기본 구조를 정의하고 TypeScript 타입들을 설정합니다.",
            "dependencies": [],
            "details": "src/stores/todo.ts 파일을 생성하고 Pinia의 defineStore를 사용하여 기본 스토어 구조를 구현합니다. Todo 인터페이스와 상태 타입들을 정의하고, 초기 state (todos 배열, loading, error 상태)를 설정합니다. TypeScript 타입 안전성을 보장하고 IDE 자동완성을 지원하는 구조로 구현합니다.",
            "status": "pending",
            "testStrategy": "Store 초기화 테스트, 타입 정의 검증, 기본 상태값 확인 테스트"
          },
          {
            "id": 2,
            "title": "Pinia Store Getters 구현",
            "description": "할일 목록의 계산된 상태를 제공하는 Getters를 구현합니다.",
            "dependencies": [
              "9.1"
            ],
            "details": "completedTodos, pendingTodos, totalCount, completedCount 등의 getter 함수들을 구현합니다. 각 getter는 reactive하게 동작하며 캐싱을 통해 성능을 최적화합니다. completedTodos는 완료된 할일만 필터링하고, pendingTodos는 미완료 할일만 반환하며, count 관련 getter들은 각각의 개수를 계산합니다.",
            "status": "pending",
            "testStrategy": "각 getter의 반환값 검증, 상태 변경 시 getter 자동 업데이트 테스트, 성능 테스트"
          },
          {
            "id": 3,
            "title": "API 연동 Actions 구현 (CRUD 기능)",
            "description": "백엔드 API와 연동하는 기본 CRUD Actions를 구현합니다.",
            "dependencies": [
              "9.1"
            ],
            "details": "fetchTodos, fetchTodo, createTodo, updateTodo, deleteTodo Actions를 구현합니다. 각 Action은 API 호출 시 loading 상태를 관리하고, 성공/실패에 따라 state를 업데이트합니다. Axios를 사용하여 RESTful API 호출을 수행하고, 적절한 HTTP 메서드(GET, POST, PUT, DELETE)를 사용합니다. API 응답 데이터의 타입 검증과 변환을 포함합니다.",
            "status": "pending",
            "testStrategy": "각 API 호출 기능 테스트, 성공/실패 시나리오 테스트, 로딩 상태 관리 테스트"
          },
          {
            "id": 4,
            "title": "완료 상태 토글 및 낙관적 업데이트 구현",
            "description": "할일 완료 상태를 토글하는 기능과 사용자 경험을 향상시키는 낙관적 업데이트를 구현합니다.",
            "dependencies": [
              "9.3"
            ],
            "details": "toggleComplete Action을 구현하여 할일의 완료 상태를 즉시 변경하고(낙관적 업데이트), 이후 서버에 API 요청을 보냅니다. 서버 요청이 실패할 경우 상태를 롤백하는 기능을 포함합니다. 이를 통해 사용자는 네트워크 지연 없이 즉시 피드백을 받을 수 있습니다. 애니메이션 효과와 함께 부드러운 상태 전환을 제공합니다.",
            "status": "pending",
            "testStrategy": "낙관적 업데이트 동작 테스트, 실패 시 롤백 기능 테스트, 네트워크 지연 상황 시뮬레이션 테스트"
          },
          {
            "id": 5,
            "title": "에러 처리 및 사용자 알림 시스템 구현",
            "description": "전역 에러 처리 시스템과 사용자 친화적 알림 시스템을 구현합니다.",
            "dependencies": [
              "9.3",
              "9.4"
            ],
            "details": "포괄적인 에러 처리 시스템을 구현하여 네트워크 오류, 서버 오류, 인증 오류 등 다양한 에러 상황을 처리합니다. 에러 메시지를 한국어로 번역하고 사용자가 이해하기 쉬운 형태로 제공합니다. Toast 알림이나 Modal을 통해 에러 상황을 사용자에게 알리고, 재시도 기능을 제공합니다. 에러 로깅 시스템도 포함하여 디버깅을 지원합니다.",
            "status": "pending",
            "testStrategy": "다양한 에러 시나리오 테스트, 에러 메시지 표시 테스트, 재시도 기능 테스트, 에러 로깅 기능 검증"
          }
        ]
      },
      {
        "id": 10,
        "title": "Todo UI 컴포넌트 및 메인 페이지 구현",
        "description": "사용자가 할일을 관리할 수 있는 UI 컴포넌트와 메인 페이지를 구현합니다.",
        "details": "핵심 컴포넌트 구현:\n- TodoList.vue: 할일 목록 표시, 무한 스크롤 또는 페이지네이션\n- TodoItem.vue: 개별 할일 항목, 체크박스, 수정/삭제 버튼\n- TodoForm.vue: 할일 생성/수정 폼, 유효성 검증\n- TodoFilter.vue: 완료상태별 필터링, 검색 기능\n- TodoStats.vue: 통계 정보 (전체/완료/미완료 개수)\n\nメ인 페이지:\n- TodosView.vue: 전체 기능 통합\n- 반응형 디자인 (모바일/데스크톱)\n- 키보드 접근성 지원\n\n기능:\n- 실시간 검색 (디바운싱)\n- 드래그 앤 드롭으로 순서 변경\n- 일괄 완료/삭제 기능\n- 로컬 스토리지 동기화 (오프라인 지원)",
        "testStrategy": "컴포넌트 렌더링 테스트, 사용자 상호작용 테스트, 폼 입력 검증 테스트, 스토어 연동 테스트, 접근성 테스트",
        "priority": "medium",
        "dependencies": [
          9
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "TodoItem.vue 개별 할일 항목 컴포넌트 구현",
            "description": "체크박스, 제목 표시, 수정/삭제 버튼을 포함한 개별 할일 항목 컴포넌트를 구현합니다.",
            "dependencies": [],
            "details": "src/components/TodoItem.vue 파일을 생성하고 개별 Todo 항목을 표시하는 컴포넌트를 구현합니다. Props로 Todo 객체를 받고, 완료 체크박스, 제목/설명 표시, 수정 버튼, 삭제 버튼을 포함합니다. 완료 상태에 따른 시각적 변화(줄긋기, 색상 변경), 호버 효과, 키보드 접근성을 지원합니다. @toggle, @edit, @delete 이벤트를 emit하여 부모 컴포넌트와 통신합니다. Tailwind CSS를 사용한 반응형 디자인과 애니메이션 효과를 적용합니다.",
            "status": "pending",
            "testStrategy": "컴포넌트 렌더링 테스트, props 전달 테스트, 이벤트 emit 테스트, 완료 상태 시각적 변화 테스트, 키보드 접근성 테스트"
          },
          {
            "id": 2,
            "title": "TodoForm.vue 할일 생성/수정 폼 컴포넌트 구현",
            "description": "할일을 생성하거나 수정할 수 있는 폼 컴포넌트를 구현하고 유효성 검증 기능을 추가합니다.",
            "dependencies": [],
            "details": "src/components/TodoForm.vue 파일을 생성하고 할일 생성/수정 폼을 구현합니다. 제목(필수, 최대 200자), 설명(선택, 최대 1000자) 입력 필드를 포함합니다. Vue 3 Composition API와 reactive를 사용한 폼 상태 관리, 실시간 유효성 검증(debouncing 적용), 에러 메시지 표시를 구현합니다. @submit 이벤트를 emit하고 취소/저장 버튼을 포함합니다. 수정 모드 지원을 위한 초기값 설정 기능과 폼 리셋 기능을 포함합니다.",
            "status": "pending",
            "testStrategy": "폼 입력 검증 테스트, 필수 필드 체크 테스트, 최대 길이 제한 테스트, submit 이벤트 테스트, 수정 모드 초기값 설정 테스트"
          },
          {
            "id": 3,
            "title": "TodoList.vue 할일 목록 표시 컴포넌트 구현",
            "description": "할일 목록을 표시하고 무한 스크롤 또는 페이지네이션을 지원하는 컴포넌트를 구현합니다.",
            "dependencies": [
              "10.1"
            ],
            "details": "src/components/TodoList.vue 파일을 생성하고 할일 목록을 표시하는 컴포넌트를 구현합니다. TodoItem 컴포넌트를 사용하여 각 할일을 렌더링하고, props로 todos 배열을 받습니다. 드래그 앤 드롭을 통한 순서 변경 기능(vue-draggable-next 사용), 일괄 선택/완료/삭제 기능, 빈 상태 처리를 포함합니다. 무한 스크롤 구현을 위한 Intersection Observer API 사용과 로딩 스피너를 포함합니다. 성능 최적화를 위한 가상 스크롤링 고려 사항을 포함합니다.",
            "status": "pending",
            "testStrategy": "할일 목록 렌더링 테스트, 드래그 앤 드롭 기능 테스트, 일괄 작업 기능 테스트, 무한 스크롤 동작 테스트, 빈 상태 표시 테스트"
          },
          {
            "id": 4,
            "title": "TodoFilter.vue 필터링 및 검색 컴포넌트 구현",
            "description": "완료 상태별 필터링과 실시간 검색 기능을 제공하는 컴포넌트를 구현합니다.",
            "dependencies": [],
            "details": "src/components/TodoFilter.vue 파일을 생성하고 필터링 및 검색 기능을 구현합니다. 완료 상태 필터(전체, 완료됨, 미완료) 탭 버튼, 실시간 검색 입력 필드(debouncing 적용), 정렬 옵션(생성일, 제목, 완료 상태)을 포함합니다. @filter-change, @search-change, @sort-change 이벤트를 emit하여 부모 컴포넌트에 변경사항을 전달합니다. URL 쿼리 파라미터와 동기화하여 브라우저 새로고침 시에도 상태를 유지하는 기능을 포함합니다. 모바일 친화적인 반응형 디자인을 적용합니다.",
            "status": "pending",
            "testStrategy": "필터 버튼 동작 테스트, 실시간 검색 디바운싱 테스트, 정렬 옵션 변경 테스트, URL 쿼리 동기화 테스트, 반응형 디자인 테스트"
          },
          {
            "id": 5,
            "title": "TodosView.vue 메인 페이지 및 TodoStats.vue 통계 컴포넌트 통합 구현",
            "description": "모든 Todo 컴포넌트를 통합하는 메인 페이지와 통계 정보를 표시하는 컴포넌트를 구현합니다.",
            "dependencies": [
              "10.1",
              "10.2",
              "10.3",
              "10.4"
            ],
            "details": "src/views/TodosView.vue 메인 페이지를 생성하여 모든 Todo 관련 컴포넌트를 통합합니다. Pinia store와 연결하여 상태 관리를 구현하고, TodoFilter, TodoForm, TodoList 컴포넌트 간의 데이터 흐름을 조정합니다. src/components/TodoStats.vue를 생성하여 전체/완료/미완료 할일 개수, 완료율, 오늘 생성된 할일 수 등의 통계를 표시합니다. 로컬 스토리지를 활용한 오프라인 동기화, 키보드 단축키(Ctrl+N: 새 할일), PWA 지원을 위한 기본 설정을 포함합니다. 전체적인 레이아웃과 UX를 완성합니다.",
            "status": "pending",
            "testStrategy": "컴포넌트 통합 테스트, Pinia store 연동 테스트, 통계 계산 정확성 테스트, 로컬 스토리지 동기화 테스트, 키보드 단축키 테스트"
          }
        ]
      },
      {
        "id": 11,
        "title": "Docker 컨테이너화 및 통합 테스트",
        "description": "백엔드와 프론트엔드를 Docker로 컨테이너화하고 전체 시스템 통합 테스트를 수행합니다.",
        "details": "백엔드 Dockerfile:\n- OpenJDK 17 Alpine 기반\n- JAR 파일 복사 및 실행\n- 헬스체크 설정\n\n프론트엔드 Dockerfile:\n- Node.js Alpine 기반\n- 멀티스테이지 빌드 (빌드 스테이지 + 서빙 스테이지)\n- nginx를 통한 정적 파일 서빙\n\ndocker-compose.yml 완성:\n- MySQL, 백엔드, 프론트엔드 서비스 연동\n- 볼륨 마운트 및 네트워크 설정\n- 환경변수 설정\n- 의존성 관계 설정 (depends_on, healthcheck)\n\n통합 테스트:\n- E2E 테스트 시나리오 작성\n- API-Frontend 연동 테스트\n- 데이터베이스 연동 확인",
        "testStrategy": "컨테이너 빌드 및 실행 테스트, 서비스 간 통신 테스트, E2E 테스트 실행, 성능 및 안정성 테스트",
        "priority": "medium",
        "dependencies": [
          6,
          10
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "백엔드 Dockerfile 작성 및 빌드 테스트",
            "description": "Spring Boot 애플리케이션을 위한 Dockerfile을 작성하고 이미지 빌드 테스트를 수행합니다.",
            "dependencies": [],
            "details": "backend 폴더에 Dockerfile 생성:\n- OpenJDK 17 Alpine 기반 이미지 사용\n- Gradle 빌드로 생성된 JAR 파일 복사\n- 8080 포트 노출\n- HEALTHCHECK 명령어로 /actuator/health 엔드포인트 확인\n- 비root 사용자로 애플리케이션 실행\n- 타임존을 Asia/Seoul로 설정\n- JVM 메모리 설정 최적화 (-Xmx512m -Xms256m)",
            "status": "pending",
            "testStrategy": "docker build 명령으로 이미지 빌드 성공 확인, docker run으로 컨테이너 실행 테스트, 헬스체크 엔드포인트 응답 확인"
          },
          {
            "id": 2,
            "title": "프론트엔드 Dockerfile 작성 및 빌드 테스트",
            "description": "Vue 3 애플리케이션을 위한 멀티스테이지 Dockerfile을 작성하고 nginx 서빙 환경을 구성합니다.",
            "dependencies": [],
            "details": "frontend 폴더에 Dockerfile 생성:\n- 멀티스테이지 빌드 구조\n- 빌드 스테이지: Node.js 18 Alpine 기반, npm install 및 npm run build 실행\n- 서빙 스테이지: nginx Alpine 기반, 빌드된 정적 파일 복사\n- nginx 설정 파일로 SPA 라우팅 지원 (try_files 설정)\n- 5173 포트 노출\n- HEALTHCHECK로 nginx 상태 확인\n- gzip 압축 활성화",
            "status": "pending",
            "testStrategy": "docker build로 멀티스테이지 빌드 성공 확인, docker run으로 nginx 서빙 테스트, 정적 파일 서빙 및 라우팅 동작 확인"
          },
          {
            "id": 3,
            "title": "docker-compose.yml 완성 및 서비스 연동 설정",
            "description": "현재 주석 처리된 백엔드, 프론트엔드 서비스를 활성화하고 전체 시스템 연동을 완성합니다.",
            "dependencies": [
              "11.1",
              "11.2"
            ],
            "details": "docker-compose.yml 파일 수정:\n- 주석 처리된 backend, frontend 서비스 활성화\n- depends_on과 healthcheck를 활용한 서비스 시작 순서 제어\n- 환경변수 설정 (database URL, API endpoints)\n- 볼륨 마운트: 로그 디렉토리, 설정 파일\n- 네트워크 설정으로 서비스간 통신 보장\n- restart: always 정책 적용\n- 포트 매핑: mysql(3306), backend(8080), frontend(5173)",
            "status": "pending",
            "testStrategy": "docker-compose up으로 전체 스택 실행 테스트, 서비스간 네트워크 통신 확인, 데이터베이스 연결 및 API 호출 테스트"
          },
          {
            "id": 4,
            "title": "API-Frontend 통합 테스트 시나리오 작성",
            "description": "백엔드 API와 프론트엔드간 데이터 흐름을 검증하는 통합 테스트를 작성합니다.",
            "dependencies": [
              "11.3"
            ],
            "details": "통합 테스트 구성:\n- Postman/Newman 또는 Jest + Supertest를 활용한 API 테스트\n- 주요 시나리오: 할일 CRUD 작업, 페이지네이션, 검색 기능\n- 테스트 데이터 준비: init.sql 확장 또는 테스트 데이터 삽입 스크립트\n- 응답 시간, 데이터 무결성, 오류 처리 검증\n- CORS 설정 검증\n- 인증/인가 흐름 테스트 (구현된 경우)\n- Docker 환경에서 실행 가능한 테스트 스크립트",
            "status": "pending",
            "testStrategy": "API 엔드포인트별 기능 테스트, 프론트엔드에서 API 호출 시뮬레이션, 오류 상황 처리 검증, 성능 기준 만족 확인"
          },
          {
            "id": 5,
            "title": "E2E 테스트 및 전체 시스템 검증",
            "description": "사용자 관점에서 전체 시스템의 동작을 검증하는 E2E 테스트를 구성하고 실행합니다.",
            "dependencies": [
              "11.4"
            ],
            "details": "E2E 테스트 환경 구성:\n- Cypress 또는 Playwright를 활용한 브라우저 테스트\n- 주요 사용자 여정: 할일 생성 → 목록 조회 → 수정 → 삭제\n- 반응형 디자인 테스트 (모바일/데스크톱)\n- 접근성 테스트 (키보드 네비게이션, 스크린 리더 호환성)\n- 성능 테스트: 페이지 로딩 시간, API 응답 시간\n- 오류 복구 테스트: 네트워크 오류, 서버 오류 상황\n- Docker 환경에서 headless 모드로 실행 가능한 설정\n- CI/CD 파이프라인 통합을 위한 테스트 결과 리포트 생성",
            "status": "pending",
            "testStrategy": "전체 사용자 워크플로우 자동화 테스트, 크로스 브라우저 호환성 확인, 성능 기준 달성 검증, 테스트 결과 대시보드 제공"
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-09-07T13:48:37.281Z",
      "updated": "2025-09-07T13:50:10.590Z",
      "description": "Tasks for master context"
    }
  }
}